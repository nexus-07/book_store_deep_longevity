# Generated by Django 3.2 on 2021-04-09 02:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.contrib.auth import get_user_model


def add_super_user(apps, schema_editor):
	User = get_user_model()
	Book = apps.get_model("app", "Book")
	BookFullText = apps.get_model("app", "BookFullText")

	User.objects.create_superuser('admin', 'admin@gmail.com', 'admin')

	for i in range(1, 31):
		user = User(username=f'user{i}', email=f'user{i}@gmail.com')
		user.save()
		user.set_password(f'user123123{i}')
		user.save()

		book = Book(title=f'title{i}', description=f'description{i}')
		book.save()

		BookFullText.objects.create(book=book, text=f'text{i}')


class Migration(migrations.Migration):
	initial = True

	dependencies = [
		('auth', '0012_alter_user_first_name_max_length'),
	]

	operations = [
		migrations.CreateModel(
			name='User',
			fields=[
				('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
				('password', models.CharField(max_length=128, verbose_name='password')),
				('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
				('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
				('username',
				 models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
				('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
				('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
				('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
				('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
				('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
				('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
				('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
				('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
			],
			options={
				'verbose_name': 'user',
				'verbose_name_plural': 'users',
				'abstract': False,
			},
			managers=[
				('objects', django.contrib.auth.models.UserManager()),
			],
		),
		migrations.CreateModel(
			name='Book',
			fields=[
				('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
				('title', models.CharField(max_length=256, verbose_name='Заголовок')),
				('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время добавления')),
				('type_book', models.SmallIntegerField(choices=[(0, 'Full'), (1, 'Chapters')], default=0, verbose_name='Тип книги')),
				('image', models.CharField(blank=True, max_length=256, verbose_name='Обложка')),
				('description', models.CharField(blank=True, max_length=500, verbose_name='Описание')),
			],
		),
		migrations.CreateModel(
			name='SubscriptionUserHistory',
			fields=[
				('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
				('type_subscription', models.SmallIntegerField(choices=[(0, 'Регистрация'), (1, 'Месяц'), (2, 'Год')], default=0, verbose_name='Тип подписки')),
				('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания')),
				('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_user_history', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
			],
		),
		migrations.CreateModel(
			name='SubscriptionUser',
			fields=[
				('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
				('date_end', models.DateTimeField(verbose_name='Дата и время окончания действия подписки')),
				('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
			],
		),
		migrations.CreateModel(
			name='BookFullText',
			fields=[
				('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
				('text', models.TextField(verbose_name='Текст книги')),
				('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время добавления')),
				('update', models.DateTimeField(null=True, verbose_name='Дата и время обновления')),
				('book', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='book_full_text', to='app.book', verbose_name='Книга')),
			],
		),
		migrations.CreateModel(
			name='BookChapter',
			fields=[
				('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
				('title', models.CharField(max_length=256, verbose_name='Заголовок главы')),
				('number', models.SmallIntegerField(verbose_name='Номер главый')),
				('text', models.TextField(verbose_name='Текст главы')),
				('created', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время добавления')),
				('update', models.DateTimeField(null=True, verbose_name='Дата и время обновления')),
				('free_distribution', models.BooleanField(default=False, verbose_name='Бесплатное распространение')),
				('book', models.ForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, related_name='book_charter', to='app.book', verbose_name='Книга')),
			],
			options={
				'unique_together': {('book', 'number')},
			},
		),
		migrations.RunPython(add_super_user),
	]
